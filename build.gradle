plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'by.tyv'
version = '2.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	implementation 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('copyContent', Copy) {
	if (project.hasProperty('initdata')) {
		def contentDir = System.getenv("CONTENT_PATH")
		if (contentDir == null) {
			throw GradleException("CONTENT_PATH не задан")
		}

		from("images")
		into(contentDir)
		logger.lifecycle("Контент успешно скопирован в директорию: " + contentDir)
	}
}

tasks.named('build') {
	dependsOn 'copyContent'
}

tasks.register('cleanContent') {
	doLast {
		def contentDir = System.getenv("CONTENT_PATH")
		if (contentDir != null) {
			def dir = file(contentDir)
			if (dir.exists() && dir.isDirectory()) {
				if (dir.listFiles().length > 0) {
					dir.listFiles().each { file ->
						if (file.isDirectory()) {
							file.deleteDir()
						} else {
							file.delete()
						}
					}
					logger.lifecycle("Содержимое директории '${contentDir}' очищено")
				} else {
					logger.lifecycle("Директория '${contentDir}' пуста")
				}
			} else {
				logger.lifecycle("Директория '${contentDir}' не найдена или не является директорией")
			}
		}
	}
}


tasks.named('clean') {
	dependsOn 'cleanContent'
}

bootJar {
	launchScript()
}

tasks.named('test') {
	useJUnitPlatform()
}
